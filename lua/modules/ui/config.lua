local config = {}

function config.alpha()
    local alpha = require("alpha")
    local dashboard = require("alpha.themes.dashboard")

    -- generated by https://patorjk.com/software/taag/
    dashboard.section.header.val = {
        "                                                     ",
        "  ███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗ ",
        "  ████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║ ",
        "  ██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║ ",
        "  ██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║ ",
        "  ██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║ ",
        "  ╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝ ",
    }

    dashboard.section.buttons.val = {
        -- dashboard.button("SPC s c", " > Scheme change", "<cmd>Telescope colorscheme<cr>"),
        dashboard.button("SPC p r", " > File frecency", "<cmd>Telescope frecency<cr>"),
        dashboard.button("SPC p e", " > File history", "<cmd>Telescope oldfiles<cr>"),
        dashboard.button("SPC p p", " > Project find", "<cmd>Telescope project<cr>"),
        dashboard.button("SPC p f", " > File find", "<cmd>Telescope find_files<cr>"),
        dashboard.button("SPC p s", " > Global search", "<cmd>Telescope live_grep<cr>"),
    }

    local function footer()
        local total_plugins = #vim.tbl_keys(packer_plugins)
        return "v"
            .. vim.version().major
            .. "."
            .. vim.version().minor
            .. "."
            .. vim.version().patch
            .. "  "
            .. total_plugins
    end

    dashboard.section.footer.val = footer()
    dashboard.section.footer.opts.hl = "String"

    local head_butt_padding = 2
    local occu_height = #dashboard.section.header.val + 2 * #dashboard.section.buttons.val + head_butt_padding
    local header_padding = math.max(0, math.ceil((vim.fn.winheight("$") - occu_height) * 0.25))
    local foot_butt_padding = 1
    dashboard.config.layout = {
        { type = "padding", val = header_padding },
        dashboard.section.header,
        { type = "padding", val = head_butt_padding },
        dashboard.section.buttons,
        { type = "padding", val = foot_butt_padding },
        dashboard.section.footer,
    }

    alpha.setup(dashboard.opts)
end

function config.catppuccin()
    -- vim.g.catppuccin_flavour = user_config.catppuccin_flavour -- Set flavour here
    vim.g.catppuccin_flavour = "macchiato" -- Set flavour here
    -- vim.g.catppuccin_flavour = "mocha" -- Set flavour here

    require("catppuccin").setup({
        -- set inactive split or window or buffer bg darker
        -- dim_inactive = {
        --     enabled = true,
        --     shade = "dark",
        --     percentage = 0.05,
        -- },
        term_colors = true,
        integrations = {
            hop = true,
            gitsigns = true,
            native_lsp = {
                enabled = true,
            },
            indent_blankline = {
                enabled = true,
            },
            cmp = true,
            notify = true,
            fidget = true,
            nvimtree = true,
            lsp_saga = true,
            lsp_trouble = true,
            telescope = true,
            treesitter = true,
            which_key = true,
            navic = { enabed = true, custom_bg = "NONE" }
        },
        highlight_overrides = {
            latte = {}
        },
        compile = {
            enabled = true,
            path = vim.fn.stdpath "cache" .. "/catppuccin"
        },
    })
    -- vim.cmd([[colorscheme catppuccin]])
end

function config.notify()
    local notify = require("notify")
    notify.setup({
        ---@usage Animation style one of { "fade", "slide", "fade_in_slide_out", "static" }
        stages = "fade_in_slide_out",
        ---@usage Function called when a new window is opened, use for changing win settings/config
        on_open = nil,
        ---@usage Function called when a window is closed
        on_close = nil,
        ---@usage timeout for notifications in ms, default 5000
        timeout = 2500,
        -- Render function for notifications. See notify-render()
        render = "default",
        ---@usage highlight behind the window for stages that change opacity
        background_colour = "Normal",
        ---@usage minimum width for notification windows
        minimum_width = 50,
        ---@usage notifications with level lower than this would be ignored. [ERROR > WARN > INFO > DEBUG > TRACE]
        level = "TRACE",
        ---@usage Icons for the different levels
        icons = {
            ERROR = "",
            WARN = "",
            INFO = "",
            DEBUG = "",
            TRACE = "✎",
        },
    })

    vim.notify = notify
end

function config.lualine()
    local navic = require("nvim-navic")

    local function escape_status()
        local ok, m = pcall(require, "better_escape")
        return ok and m.waiting and "✺ " or ""
    end

    local function diff_source()
        local gitsigns = vim.b.gitsigns_status_dict
        if gitsigns then
            return {
                added = gitsigns.added,
                modified = gitsigns.changed,
                removed = gitsigns.removed,
            }
        end
    end

    local mini_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = {},
        lualine_x = {},
        lualine_y = {},
        lualine_z = { "location" },
    }
    local simple_sections = {
        lualine_a = { "mode" },
        lualine_b = { "filetype" },
        lualine_c = {},
        lualine_x = {},
        lualine_y = {},
        lualine_z = { "location" },
    }
    local outline = {
        sections = mini_sections,
        filetypes = { "lspsagaoutline" },
    }
    local dapui_scopes = {
        sections = simple_sections,
        filetypes = { "dapui_scopes" },
    }

    local dapui_breakpoints = {
        sections = simple_sections,
        filetypes = { "dapui_breakpoints" },
    }

    local dapui_stacks = {
        sections = simple_sections,
        filetypes = { "dapui_stacks" },
    }

    local dapui_watches = {
        sections = simple_sections,
        filetypes = { "dapui_watches" },
    }

    local function python_venv()
        local function env_cleanup(venv)
            if string.find(venv, "/") then
                local final_venv = venv
                for w in venv:gmatch("([^/]+)") do
                    final_venv = w
                end
                venv = final_venv
            end
            return venv
        end

        if vim.bo.filetype == "python" then
            local venv = os.getenv("CONDA_DEFAULT_ENV")
            if venv then
                return string.format("%s", env_cleanup(venv))
            end
            venv = os.getenv("VIRTUAL_ENV")
            if venv then
                return string.format("%s", env_cleanup(venv))
            end
        end
        return ""
    end

    require("lualine").setup({
        options = {
            icons_enabled = true,
            theme = "catppuccin",
            disabled_filetypes = {},
            component_separators = "|",
            section_separators = { left = "", right = "" },
        },
        sections = {
            lualine_a = { "mode" },
            lualine_b = { { "branch" }, { "diff", source = diff_source } },
            lualine_c = {
                { navic.get_location, cond = navic.is_available },
            },
            lualine_x = {
                { escape_status },
                {
                    "diagnostics",
                    sources = { "nvim_diagnostic" },
                    symbols = { error = " ", warn = " ", info = " " },
                },
            },
            lualine_y = {
                { "filetype", colored = true, icon_only = false },
                { python_venv },
                { "encoding" },
                {
                    "fileformat",
                    icons_enabled = true,
                    symbols = {
                        unix = "LF",
                        dos = "CRLF",
                        mac = "CR",
                    },
                },
            },
            lualine_z = { "progress", "location" },
        },
        inactive_sections = {
            lualine_a = {},
            lualine_b = {},
            lualine_c = { "filename" },
            lualine_x = { "location" },
            lualine_y = {},
            lualine_z = {},
        },
        tabline = {},
        extensions = {
            "quickfix",
            "nvim-tree",
            "toggleterm",
            "fugitive",
            outline,
            dapui_scopes,
            dapui_breakpoints,
            dapui_stacks,
            dapui_watches,
        },
    })
end

function config.nvim_navic()
    vim.g.navic_silence = true

    require("nvim-navic").setup({
        icons = {
            Method = " ",
            Function = " ",
            Constructor = " ",
            Field = " ",
            Variable = " ",
            Class = "ﴯ ",
            Interface = " ",
            Module = " ",
            Property = "ﰠ ",
            Enum = " ",
            File = " ",
            EnumMember = " ",
            Constant = " ",
            Struct = " ",
            Event = " ",
            Operator = " ",
            TypeParameter = " ",
            Namespace = " ",
            Object = " ",
            Array = " ",
            Boolean = " ",
            Number = " ",
            Null = "ﳠ ",
            Key = " ",
            String = " ",
            Package = " ",
        },
        highlight = true,
        separator = " > ",
        depth_limit = 0,
        depth_limit_indicator = "..",
    })
end

function config.nvim_tree()
    require("nvim-tree").setup({
        disable_netrw = true,
        hijack_cursor = true, -- Keeps the cursor on the first letter of the filename.
        hijack_netrw = true,
        renderer = {
            special_files = { "Cargo.toml", "Makerfile", "package.json", "README.md" },
            indent_markers = {
                enable = true,
                icons = {
                    corner = "└ ",
                    edge = "│ ",
                    item = "│ ",
                    none = "  ",
                },
            },
            highlight_git = true,
            icons = {
                git_placement = "before", -- before / after / signcolumn
            },
        },
        actions = {
            change_dir = {
                enable = false,
            }
        },
        on_attach = function(bufnr)
            local inject_node = require("nvim-tree.utils").inject_node
            local telescope = require("modules.tools.telescope")

            vim.keymap.set("n", "<leader>s", inject_node(function(node)
                if node then
                    telescope.search_under(node.absolute_path)
                end
            end), { buffer = bufnr, noremap = true })

            vim.keymap.set("n", "<leader>f", inject_node(function(node)
                if node then
                    telescope.find_files_under(node.absolute_path)
                end
            end), { buffer = bufnr, noremap = true })

            vim.keymap.set("n", "<leader>f", inject_node(function(node)
                if node then
                    telescope.find_files_under(node.absolute_path)
                end
            end), { buffer = bufnr, noremap = true })
        end
    })
end

function config.nvim_bufferline()
    local opts = {
        options = {
            number = true,
            modified_icon = "*",
            buffer_close_icon = "",
            left_trunc_marker = "",
            right_trunc_marker = "",
            max_name_length = 14,
            max_prefix_length = 13,
            tab_size = 20,
            show_buffer_close_icons = true,
            show_buffer_icons = true,
            show_tab_indicators = true,
            diagnostics = "nvim_lsp",
            always_show_bufferline = true,
            separator_style = "thin",
            offsets = {
                {
                    filetype = "NvimTree",
                    text = "File Explorer",
                    text_align = "center",
                    padding = 1,
                },
            },
            diagnostics_indicator = function(count)
                return "(" .. count .. ")"
            end,
        },
        -- Change bufferline's highlights here! See `:h bufferline-highlights` for detailed explanation.
        -- Note: If you use catppuccin then modify the colors below!
        highlights = require("catppuccin.groups.integrations.bufferline").get(),
    }

    require("bufferline").setup(opts)
end

function config.gitsigns()
    require("gitsigns").setup({
        signs = {
            add          = { hl = "GitSignsAdd", text = "│", numhl = "GitSignsAddNr", linehl = "GitSignsAddLn", },
            change       = { hl = "GitSignsChange", text = "│", numhl = "GitSignsChangeNr", linehl = "GitSignsChangeLn", },
            delete       = { hl = "GitSignsDelete", text = "_", numhl = "GitSignsDeleteNr", linehl = "GitSignsDeleteLn", },
            topdelete    = { hl = "GitSignsDelete", text = "‾", numhl = "GitSignsDeleteNr", linehl = "GitSignsDeleteLn", },
            changedelete = { hl = "GitSignsChange", text = "~", numhl = "GitSignsChangeNr", linehl = "GitSignsChangeLn", },
        },
        keymaps = {
            -- Default keymap options
            noremap = true,
            buffer = true,
            ["n ]g"] = {
                expr = true,
                "&diff ? ']g' : '<cmd>lua require\"gitsigns\".next_hunk()<CR>'",
            },
            ["n [g"] = {
                expr = true,
                "&diff ? '[g' : '<cmd>lua require\"gitsigns\".prev_hunk()<CR>'",
            },
            ["n <leader>hs"] = '<cmd>lua require"gitsigns".stage_hunk()<CR>',
            ["v <leader>hs"] = '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
            ["n <leader>hu"] = '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>',
            ["n <leader>hr"] = '<cmd>lua require"gitsigns".reset_hunk()<CR>',
            ["v <leader>hr"] = '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>',
            ["n <leader>hR"] = '<cmd>lua require"gitsigns".reset_buffer()<CR>',
            ["n <leader>hp"] = '<cmd>lua require"gitsigns".preview_hunk()<CR>',
            ["n <leader>hb"] = '<cmd>lua require"gitsigns".blame_line({full=true})<CR>',
            -- Text objects
            ["o ih"] = ':<C-U>Gitsigns select_hunk<CR>',
            ["x ih"] = ':<C-U>Gitsigns.select_hunk<CR>',
        },
        watch_gitdir = { interval = 1000, follow_files = true },
        current_line_blame = true,
        current_line_blame_opts = { delay = 1000, virtual_text_pos = "eol" },
        sign_priority = 6,
        update_debounce = 100,
        status_formatter = nil, -- Use default
        word_diff = false,
        diff_opts = { internal = true },
    })
end

function config.indent_blankline()
    require("indent_blankline").setup({
        char = "│",
        show_first_indent_level = true,
        filetype_exclude = {
            "startify",
            "dashboard",
            "dotooagenda",
            "log",
            "fugitive",
            "gitcommit",
            "packer",
            "vimwiki",
            "markdown",
            "json",
            "txt",
            "vista",
            "help",
            "todoist",
            "NvimTree",
            "peekaboo",
            "git",
            "TelescopePrompt",
            "undotree",
            "flutterToolsOutline",
            "", -- for all buffers without a file type
        },
        buftype_exclude = { "terminal", "nofile" },
        show_trailing_blankline_indent = false,
        show_current_context = true,
        context_patterns = {
            "class",
            "function",
            "method",
            "block",
            "list_literal",
            "selector",
            "^if",
            "^table",
            "if_statement",
            "while",
            "for",
            "type",
            "var",
            "import",
        },
        space_char_blankline = " ",
    })
    -- because lazy load indent-blankline so need readd this autocmd
    vim.cmd("autocmd CursorMoved * IndentBlanklineRefresh")
end

-- Show scrollbar
function config.scrollview()
    require("scrollview").setup({})
end

-- Standalong UI for nvim-lsp progress
function config.fidget()
    require("fidget").setup({
        window = { blend = 0 },
    })
end

return config
